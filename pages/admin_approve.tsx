import { useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import Header from '../components/header';
import EditableInventoryForm from '../components/EditableInventoryForm';
import Toast from '../components/Toast';

export default function AdminPage() {
  const [user, setUser] = useState<any>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [records, setRecords] = useState<any[]>([]);
  const [index, setIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState<any>({});
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' } | null>(null);
  const [originalCoords, setOriginalCoords] = useState<{ latitude: any; longitude: any }>({ latitude: '', longitude: '' });


  useEffect(() => {
    const fetchUserAndCheckAdmin = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        setError('‚õî –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
        setLoading(false);
        return;
      }
      setUser(user);

      const { data: adminData } = await supabase
        .from('admin_users')
        .select('id')
        .eq('id', user.id)
        .single();

      if (!adminData) {
        setError('‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏');
        setLoading(false);
        return;
      }

      setIsAdmin(true);
      const { data: records } = await supabase
        .from('records_unverified')
        .select('*')
        .order('created_at', { ascending: true });

      setRecords(records || []);

      const first = records?.[0] || {};
      setFormData((prev: any) => ({
        ...prev,
        ...first,
        current_region: first.current_region || '',
        current_district: first.current_district || '',
        current_community: first.current_community || '',
        current_settlement_type: first.current_settlement_type || '',
        current_settlement_name: first.current_settlement_name || '',
        latitude: first.latitude || '',
        longitude: first.longitude || '',
      }));

      // üîΩ –æ—Å—å —Ü–µ –¥–æ–¥–∞—î–º–æ:
      setOriginalCoords({
        latitude: first.latitude || '',
        longitude: first.longitude || '',
      });

      setLoading(false);
    };

    fetchUserAndCheckAdmin();
  }, []);


  const goToRecord = (newIndex: number) => {
    if (newIndex >= 0 && newIndex < records.length) {
      const newRecord = records[newIndex];
      setIndex(newIndex);
      setFormData(records[newIndex]);
      setOriginalCoords({
        latitude: newRecord.latitude,
        longitude: newRecord.longitude,
      });
    }
  };


  function parseLatLng(value: any): number | null {
    if (value === null || value === undefined || value === '') return null;
    const num = parseFloat(value.toString());
    return isNaN(num) ? null : num;
  }
  const saveRecord = async () => {
    try {
      // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç
      // const { data: existing } = await supabase
      //   .from('records')
      //   .select('id')
      //   .match({
      //     current_region: formData.current_region,
      //     current_district: formData.current_district,
      //     current_community: formData.current_community,
      //     current_settlement_type: formData.current_settlement_type,
      //     current_settlement_name: formData.current_settlement_name,
      //     case_signature: formData.case_signature,
      //     inventory_year: formData.inventory_year,
      //   })
      //   .maybeSingle();
      const matchQuery: Record<string, any> = {
        current_region: formData.current_region,
        current_district: formData.current_district,
        current_community: formData.current_community,
        current_settlement_type: formData.current_settlement_type,
        current_settlement_name: formData.current_settlement_name,
        case_signature: formData.case_signature,
      };

      if (formData.inventory_year) {
        matchQuery.inventory_year = formData.inventory_year;
      }

      const { data: existing } = await supabase
        .from('records')
        .select('id')
        .match(matchQuery)
        .maybeSingle();


      if (existing) {
        setToast({
          message: '‚ùó –¢–∞–∫–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —É–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—à—É–∫–∞—Ç–∏ –π–æ–≥–æ –≤ —Ä–µ—î—Å—Ç—Ä—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤',
          type: 'error',
        });
        return;
      }

      // 2. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const { is_ukrainian_archive, ...recordToInsert } = formData;

      // const preparedRecord = {
      //   ...recordToInsert,
      //   approved: true,
      //   created_by: user?.id || null,
      //   latitude: formData.latitude || originalCoords.latitude || null,
      //   longitude: formData.longitude || originalCoords.longitude || null,
      // };
      const parseIntegerOrNull = (value) => {
        if (value === "" || value === null || value === undefined) return null;
        const num = parseInt(value, 10);
        return isNaN(num) ? null : num;
      };

      const parseFloatOrNull = (value) => {
        if (value === "" || value === null || value === undefined) return null;
        const num = parseFloat(value);
        return isNaN(num) ? null : num;
      };

      const preparedRecord = {
        ...recordToInsert,
        approved: true,
        created_by: user?.id || null,
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è:
        latitude: parseFloatOrNull(formData.latitude) ?? parseFloatOrNull(originalCoords.latitude),
        longitude: parseFloatOrNull(formData.longitude) ?? parseFloatOrNull(originalCoords.longitude),

        pages_count: parseIntegerOrNull(recordToInsert.pages_count ?? formData.pages_count),
        inventory_year: parseIntegerOrNull(recordToInsert.inventory_year ?? formData.inventory_year),
        inventory_start_page: parseIntegerOrNull(recordToInsert.inventory_start_page ?? formData.inventory_start_page),
      };


      // 3. –í—Å—Ç–∞–≤–∫–∞ –¥–æ records
      const { error: insertError } = await supabase
        .from('records')
        .insert([preparedRecord]);

      if (insertError) {
        console.error(insertError);
        setToast({ message: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –±–∞–∑–∏', type: 'error' });
        return;
      }

      // 4. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ records_unverified
      const { error: deleteError } = await supabase
        .from('records_unverified')
        .delete()
        .eq('id', formData.id);

      if (deleteError) {
        console.error('Delete error:', deleteError);
        setToast({ message: `–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${deleteError.message}`, type: 'error' });
      } else {
        setToast({ message: '‚úÖ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ', type: 'success' });
      }

      // 5. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
      const updatedRecords = records.filter((_, i) => i !== index);
      setRecords(updatedRecords);

      // 6. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      if (updatedRecords.length === 0) {
        setFormData({});
        setIndex(0);
        setToast({
          message: 'üéâ –£—Å—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ! –ó–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å.',
          type: 'success',
        });
      } else {
        const nextIndex = index >= updatedRecords.length ? updatedRecords.length - 1 : index;
        setIndex(nextIndex);
        setFormData(updatedRecords[nextIndex]);
      }
    } catch (err) {
      console.error(err);
      setToast({ message: '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ', type: 'error' });
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É 
  const rejectRecord = async () => {
    const confirmed = window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ü–µ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä? –¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.');

    if (!confirmed) {
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –¥—ñ—é
      return;
    }

    try {
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ records_unverified
      const { error } = await supabase.from('records_unverified').delete().eq('id', formData.id);

      if (error) {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ');
        console.error(error);
        return;
      }

      alert('‚ùå –ó–∞–ø–∏—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π –∑–∞–ø–∏—Å –∑—ñ —Å–ø–∏—Å–∫—É
      const updatedRecords = records.filter((_, i) => i !== index);
      setRecords(updatedRecords);

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ—Ä–º—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Å, –∞–±–æ –æ—á–∏—â—É—î–º–æ, —è–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î
      if (updatedRecords.length === 0) {
        setIndex(0);
        setFormData({});
        setToast({
          message: 'üéâ –£—Å—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ! –ó–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å.',
          type: 'success',
        });
      } else {
        const nextIndex = index >= updatedRecords.length ? updatedRecords.length - 1 : index;
        setIndex(nextIndex);
        setFormData(updatedRecords[nextIndex]);
      }
    } catch (err) {
      alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ');
      console.error(err);
    }
  };


  if (loading) {
    return (
      <>
        <Header />
        <main className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen p-6 flex items-center justify-center">
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
        </main>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Header />
        <main className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen p-6 flex items-center justify-center">
          <p className="text-red-600 dark:text-red-400 font-medium text-center">{error}</p>
        </main>
      </>
    );
  }

  return (
    <>
      <Header />
      <main className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen p-6">
        <div className="max-w-2xl w-full mx-auto">
          <h1 className="text-2xl font-bold mb-6">üõ† –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —ñ –≤–Ω–µ—Å—ñ—Ç—å –∑–º—ñ–Ω–∏, —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ</h1>

          {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
          {records.length === 0 ? (
            <p className="text-gray-700 dark:text-gray-300">–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</p>
          ) : (
            <>
              <EditableInventoryForm data={formData} onChange={setFormData} />
              <div className="flex justify-between items-center mt-6">
                <div className="flex gap-2">
                  <button
                    type="button"
                    onClick={() => goToRecord(index - 1)}
                    className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                    disabled={index === 0}
                  >
                    ‚¨Ö –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π
                  </button>
                  <button
                    type="button"
                    onClick={() => goToRecord(index + 1)}
                    className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                    disabled={index === records.length - 1}
                  >
                    –ù–∞—Å—Ç—É–ø–Ω–∏–π ‚û°
                  </button>
                </div>
                <div className="flex gap-4">
                  <button
                    type="button"
                    onClick={saveRecord}
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  >
                    ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏
                  </button>
                  <button
                    type="button"
                    onClick={rejectRecord}
                    className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                  >
                    ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      </main>
    </>
  );
}
